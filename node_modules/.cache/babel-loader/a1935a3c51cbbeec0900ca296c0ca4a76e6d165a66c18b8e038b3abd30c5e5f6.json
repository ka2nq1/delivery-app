{"ast":null,"code":"import { addToCart, getCartItems, removeAll, removeOne, updateOne } from \"../../api\";\nimport { SET_CART, SET_IS_LOADING } from \"../../constants/CartConstants\";\nimport { success } from \"./alertActions\";\nexport const getCart = () => dispatch => {\n  dispatch(setIsLoading(true));\n  getCartItems().then(response => {\n    dispatch(setCart(response.data));\n    dispatch(setIsLoading(false));\n    return response;\n  });\n};\nexport const removeCartItem = itemId => dispatch => {\n  dispatch(setIsLoading(true));\n  removeOne(itemId).then(response => {\n    dispatch(setCart(response.data));\n    dispatch(setIsLoading(false));\n    return response;\n  });\n};\nexport const clearCart = () => dispatch => {\n  dispatch(setIsLoading(true));\n  removeAll().then(response => {\n    dispatch(setCart([]));\n    dispatch(setIsLoading(false));\n    return response;\n  });\n};\nexport const addCartItem = product => dispatch => {\n  dispatch(setIsLoading(true));\n  addToCart(product).then(response => {\n    dispatch(setCart(response.data));\n    dispatch(setIsLoading(false));\n    dispatch(success(`${product.name} was added!`));\n    return response;\n  });\n};\nexport const updateCartItem = (itemId, amount) => dispatch => {\n  dispatch(setIsLoading(true));\n  updateOne(itemId, amount).then(response => {\n    dispatch(setCart(response.data));\n    dispatch(setIsLoading(false));\n    return response;\n  });\n};\nconst setCart = payload => ({\n  type: SET_CART,\n  payload\n});\nconst setIsLoading = payload => ({\n  type: SET_IS_LOADING,\n  payload\n});","map":{"version":3,"names":["addToCart","getCartItems","removeAll","removeOne","updateOne","SET_CART","SET_IS_LOADING","success","getCart","dispatch","setIsLoading","then","response","setCart","data","removeCartItem","itemId","clearCart","addCartItem","product","name","updateCartItem","amount","payload","type"],"sources":["/Users/aleksandr/Desktop/nodeJsLessons2/delivery-app/src/store/actions/cartActions.js"],"sourcesContent":["import { addToCart, getCartItems, removeAll, removeOne, updateOne } from \"../../api\";\nimport { SET_CART, SET_IS_LOADING } from \"../../constants/CartConstants\";\nimport { success } from \"./alertActions\";\n\nexport const getCart = () => (\n    dispatch => {\n        dispatch(setIsLoading(true));\n        getCartItems()\n            .then(response => {\n                dispatch(setCart(response.data));\n                dispatch(setIsLoading(false));\n                return response;\n            })\n    }\n);\n\nexport const removeCartItem = (itemId) => (\n    dispatch => {\n        dispatch(setIsLoading(true));\n        removeOne(itemId)\n            .then(response => {\n                dispatch(setCart(response.data));\n                dispatch(setIsLoading(false));\n                return response;\n            }\n            )\n    }\n);\n\nexport const clearCart = () => (\n    dispatch => {\n        dispatch(setIsLoading(true));\n        removeAll()\n            .then(response => {\n                dispatch(setCart([]));\n                dispatch(setIsLoading(false));\n                return response;\n            }\n            )\n    }\n);\n\nexport const addCartItem = (product) => (\n    dispatch => {\n        dispatch(setIsLoading(true));\n        addToCart(product)\n            .then(response => {\n                dispatch(setCart(response.data));\n                dispatch(setIsLoading(false));\n                dispatch(success(`${product.name} was added!`))\n                return response;\n            })\n    }\n);\n\nexport const updateCartItem = (itemId, amount) => (\n    dispatch => {\n        dispatch(setIsLoading(true));\n        updateOne(itemId, amount)\n            .then(response => {\n                dispatch(setCart(response.data));\n                dispatch(setIsLoading(false))\n                return response;\n            }\n            )\n    }\n);\n\nconst setCart = (payload) => ({ type: SET_CART, payload });\nconst setIsLoading = (payload) => ({ type: SET_IS_LOADING, payload });"],"mappings":"AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,QAAQ,WAAW;AACpF,SAASC,QAAQ,EAAEC,cAAc,QAAQ,+BAA+B;AACxE,SAASC,OAAO,QAAQ,gBAAgB;AAExC,OAAO,MAAMC,OAAO,GAAGA,CAAA,KACnBC,QAAQ,IAAI;EACRA,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5BT,YAAY,CAAC,CAAC,CACTU,IAAI,CAACC,QAAQ,IAAI;IACdH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChCL,QAAQ,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,OAAOE,QAAQ;EACnB,CAAC,CAAC;AACV,CACH;AAED,OAAO,MAAMG,cAAc,GAAIC,MAAM,IACjCP,QAAQ,IAAI;EACRA,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5BP,SAAS,CAACa,MAAM,CAAC,CACZL,IAAI,CAACC,QAAQ,IAAI;IACdH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChCL,QAAQ,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,OAAOE,QAAQ;EACnB,CACA,CAAC;AACT,CACH;AAED,OAAO,MAAMK,SAAS,GAAGA,CAAA,KACrBR,QAAQ,IAAI;EACRA,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5BR,SAAS,CAAC,CAAC,CACNS,IAAI,CAACC,QAAQ,IAAI;IACdH,QAAQ,CAACI,OAAO,CAAC,EAAE,CAAC,CAAC;IACrBJ,QAAQ,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,OAAOE,QAAQ;EACnB,CACA,CAAC;AACT,CACH;AAED,OAAO,MAAMM,WAAW,GAAIC,OAAO,IAC/BV,QAAQ,IAAI;EACRA,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5BV,SAAS,CAACmB,OAAO,CAAC,CACbR,IAAI,CAACC,QAAQ,IAAI;IACdH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChCL,QAAQ,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7BD,QAAQ,CAACF,OAAO,CAAE,GAAEY,OAAO,CAACC,IAAK,aAAY,CAAC,CAAC;IAC/C,OAAOR,QAAQ;EACnB,CAAC,CAAC;AACV,CACH;AAED,OAAO,MAAMS,cAAc,GAAGA,CAACL,MAAM,EAAEM,MAAM,KACzCb,QAAQ,IAAI;EACRA,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;EAC5BN,SAAS,CAACY,MAAM,EAAEM,MAAM,CAAC,CACpBX,IAAI,CAACC,QAAQ,IAAI;IACdH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChCL,QAAQ,CAACC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,OAAOE,QAAQ;EACnB,CACA,CAAC;AACT,CACH;AAED,MAAMC,OAAO,GAAIU,OAAO,KAAM;EAAEC,IAAI,EAAEnB,QAAQ;EAAEkB;AAAQ,CAAC,CAAC;AAC1D,MAAMb,YAAY,GAAIa,OAAO,KAAM;EAAEC,IAAI,EAAElB,cAAc;EAAEiB;AAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}